# <path to game directory>/addons/eventscripts/_engines/python/Lib/esutils/
# exceptions/__init__.py
# by Adam Cunnington

"""Catch exceptions raised and log them for reference / error tracing where 
stdout is unavailable to the user, i.e. on a hosted server.

"""


from __future__ import with_statement
import logging
import os
import sys
import traceback


_ERROR_FILE = os.path.join(os.path.dirname(__file__), "errors.log")


__all__ = (
    "ExceptionsError", 
    "ExceptionManager", 
    "exception_manager", 
)


class ExceptionsError(Exception):
    """General error encountered relating to esutils.exceptions"""
	
    
class ExceptionManager(object):
    """Create a thread safe instance to manage all exceptions caught."""

    def __init__(self):
        self._log_errors = False
        self._sys_excepthook = sys.excepthook
        logging.basicConfig(filename=_ERROR_FILE, datefmt="%c", filemode="w", 
                            level=logging.CRITICAL, 
                            format="- %(asctime)s\n%(message)s")
                            
    def _excepthook(self, type, value, traceback):
        try:
            self._log_error(traceback.format_exception(type, value, traceback))
        except EnvironmentError:
            self._sys_excepthook(*sys.exc_info())
        finally:
            self._sys_excepthook(*args, **kwargs)
            
    def _get_log(self):
        return self._log_errors
        
    def _log_error(self, traceback_lines):
        logging.critical("".join(traceback_lines))
        
    def _set_log(self, value):
        if value:
            sys.excepthook = self._excepthook
        else:
            sys.excepthook = self._sys_excepthook
        self._log_errors = value
        
    log = property(_get_log, _set_log)
    
exception_manager = ExceptionManager()