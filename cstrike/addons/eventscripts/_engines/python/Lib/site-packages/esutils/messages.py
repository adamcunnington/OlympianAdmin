# <path to game directory>/addons/eventscripts/_engines/python/Lib/esutils/
# messages.py
# by Adam Cunnington

"""Provide intuitive methods to cover the range of general and player-specific 
messaging capabilities that the game provides.

"""

import string

import es


__all__ = (
    "MessagesError", 
    "CentreWhisper", 
    "Echo", 
    "HUDWhisper", 
    "MOTD", 
    "announce", 
    "centre_announce", 
    "whisper", 
    "output", 
)


_TEAMCOLOUR = "teamcolour"
_COLOURS = {
    "olivegreen": "\x05", 
    "green": "\x04", 
    "lightgreen": "\x03", 
    "yellow": "\x01", 
    _TEAMCOLOUR: "\x03"
}
_DELIMITER = "$"


class MessagesError(Exception):
    """General error encountered relating to esutils.messages"""


class _PlayerMessage(object):
    # Base class for creating, sending and deleting usermsg objects.
    _USERMSG_TYPE = "byte"
    
    def __init__(self):
        self.name = str(self)
        es.usermsg("create", self.name, self._USERMSG_CATEGORY)
        es.usermsg("write", self._USERMSG_TYPE, self.name, self._USERMSG_NUMBER)
        
    def __del__(self):
        # When the object reference count hits 0, this magic method is called 
        # implicitly, deleting the usermsg object.
        es.usermsg("delete", self.name)
        
    def send(self, *user_IDs):
        """Send the created usermsg object to a player(s).
        
        Arguments:
        user_IDs - the user IDs to send the usermsg to.
        
        """
        for user_ID in user_IDs:
            es.usermsg("send", self.name, user_ID)
            
class CentreWhisper(_PlayerMessage):
    """Represents a player-specific centre-screen message."""
    _USERMSG_CATEGORY = "TextMsg"
    _USERMSG_NUMBER = 4
    
    def __init__(self, text):
        super(CentreWhisper, self).__init__()
        es.usermsg("write", "string", self.name, text)
        
class Echo(_PlayerMessage):
    """Represents a player-specific client console output."""
    _USERMSG_CATEGORY = "TextMsg"
    _USERMSG_NUMBER = 2
    
    def __init__(self, text=" "):
        """Instantiate an Echo object.
        
        Arguments:
        text (Keyword Default: " ") - The text to output. By default, a blank 
        line (minimum of 1 space) will be used.
        
        """
        super(Echo, self).__init__()
        es.usermsg("write", "string", self.name, text)
        
class HUDWhisper(_PlayerMessage):
    """Represents a player-specific HUDHint dialogue."""
    USERMSG_CATERGORY = "HintText"
    _USERMSG_NUMBER = 0
    _USERMSG_TYPE = "bool"
    
    def __init__(self, text=None):
        """Instantiate a HUDWhisper object.
        
        Arguments:
        text (Keyword Default: None) - The text to appear. If the value is 
        omitted, the player's HUD will be cleared.
        
        """
        super(HUDWhisper, self).__init__(text)
        if text is not None:
            es.usermsg("write", "string", self.name, text)
        else:
            es.usermsg("create", self.name, "ResetHUD")
            es.usermsg("write", "byte", self.name, -1)
            
class MOTD(_PlayerMessage):
    """Represents a player-specific MOTD VGUI dialogue window.
    
    Attributes:
    TYPE_TEXT - Text contents.
    TYPE_URL - The URL to show.
    TYPE_FILE - The file to show.
    
    """
    _USERMSG_CATEGORY = "VGUIMenu"
    _USERMSG_NUMBER = 3
    TYPE_TEXT = 0
    TYPE_URL = 2
    TYPE_FILE = 3
    
    def __init__(self, title, type, contents, visible=True):
        """Instantiate a MOTD object.
        
        Arguments:
        title - The title of the window.
        type - The window contents type. See the class doc.
        contents - The content / value for the window type.
        visible (Keyword Default: True) - 
        
        """
        self.name = str(self)
        es.usermsg("create", self.name, self._USERMSG_CATEGORY)
        es.usermsg("write", "string", self.name, "info")
        es.usermsg("write", "byte", self.name, int(visible))
        es.usermsg("write", "byte", self.name, self._USERMSG_NUMBER)
        es.usermsg("write", "string", self.name, "title")
        es.usermsg("write", "string", self.name, title)
        es.usermsg("write", "string", self.name, "type")
        es.usermsg("write", "string", self.name, type)
        es.usermsg("write", "string", self.name, "msg")
        es.usermsg("write", "string", self.name, contents)
        
        
def _format_text(text, mapping=_COLOURS):
    template = string.Template(text)
    template.delimiter = _DELIMITER
    return template.safe_substitute(mapping)
    
def announce(text):
    """Broadcast a message, viewable by everyone on the server.
    
    Arguments:
    text - The text to announce.
    
    """
    es.msg(_format_text(text))
    
def centre_announce(text):
    """Broadcast a message to the centre of everyone's screen.
    
    Arguments:
    text - The text to announce.
    
    """
    es.centermsg(text)
    
def whisper(user_ID, text, index=None):
    """Send an individual player a message that only they can see.
    
    Arguments:
    user_ID - The user ID to send the text to.
    text - The text to whisper.
    index (Keyword Default - None) - The index to use to get the player's 
    teamcolour (if relevant). In this instance, if no index is passed, it will 
    be dynamically obtained using the user_ID.
    
    """
    formatted_text = _format_text(text)
    if len(_format_text(text, {_TEAMCOLOUR: ""})) != len(text):
        # In which case, use usermsg's SayText2.
        name = "_whisper"
        es.usermsg("create", name, "SayText2")
        if index is None:
            index = players.Player(user_ID).index
        es.usermsg("write", "byte", name, index)
        es.usermsg("write", "byte", name, 0)
        es.usermsg("write", "string", name, formatted_text)
        es.usermsg("send", name, user_ID)
        es.usermsg("delete", name)
    else:
        es.tell(user_ID, formatted_text)
        
def output(text):
    """Output text to the server console.
    
    Arguments:
    text - the text to be output.
    
    """
    es.dbgmsg(0, text)