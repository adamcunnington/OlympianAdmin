# <path to game directory>/addons/eventscripts/_engines/python/Lib/esutils/
# admins.py
# by Adam Cunnington

"""Provide a simple way to register and interact with clients possessing
various permission levels. Also provide generic functions to test whether a
user which can be offline possesses a given permission.

"""

import psyco
psyco.full()


__all__ = (
    "AdminsError",
    "Admin",
    "Group",
	"is_user_authorised"
    )


class AdminsError(Exception):
    """General error encountered relating to esutils.admins"""


class Admin(object):
    """Create an admin that can have varying permissions."""

    admins = {}

    def __init__(self, steam_id, name):
        """Instantiate an Admin object.

        Arguments:
        steam_id - the steam ID of the user to make admin.
        name - the name of the client to be stored.

        """
        self.steam_id = steam_id
        self.name = name
        self.permissions = set()
        self.group = None
        self.admins[steam_id] = self


class Group(object):
    """Create a group that admins can be joined to."""

    def __init__(self, *permissions):
        """Instantiate a Group object.

        Arguments:
        permissions - the permissions the group should have.

        """
        self.permissions = set(permissions)


def is_user_authorised(steam_id, permission=None):
	"""Check whether a particular steam ID exists in the admins dictionary
	as an admin. If so, check if they possess a specific permission.
	Return the boolean result.

	Arguments:
	steam_id - the steam ID of the user to be checked.
	permission (Keyword Default: None) - the permission name to be checked.

	"""
	if steam_id not in Admin.admins:
		return False
	if permission is None:
		return True
	admin = Admin.admins[steam_id]
	if admin.group is None:
		return permission in admin.permissions
	return permission in admin.group.permissions