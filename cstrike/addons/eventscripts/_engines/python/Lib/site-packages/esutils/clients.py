# <path to game directory>/addons/eventscripts/_engines/python/Lib/esutils/
# clients.py
# by Adam Cunnington

"""Provides a simple way to register and interact with clients possessing
various permission and/or immunity levels. Also provide generic functions to
test whether a user which can be offline possesses a given permission.

"""

import psyco
psyco.full()

from esutils import tools


__all__ = (
    "ClientsError",
    "Client",
    "Group",
	"is_user_authorised",
    "is_user_immune"
    )


class ClientsError(Exception):
    """General error encountered relating to esutils.clients"""


class Client(object):
    """Create a client that can have varying permissions."""

    clients = {}

    def __init__(self, steam_ID, name):
        """Instantiate a client object.

        Arguments:
        steam_ID - the steam ID of the client.
        name - the name of the client to be stored.

        """
        self.steam_ID = steam_ID
        self.name = name
        self.permissions = set()
        self.immunities = set()
        self.group = None
        self.clients[steam_ID] = self


class Group(object):
    """Create a group that clients can be joined to."""

    def __init__(self, basename, verbose_name=None):
        """Instantiate a Group object.

        Arguments:
        permissions - the permissions the group should have.

        """
        self.basename = basename
        self.verbose_name = verbose_name or tools.format_verbose_name(basename)
        self.permissions = set()
        self.immunities = set()


def is_user_authorised(steam_ID, permission=None):
	"""Check whether a particular steam ID exists in the clients dictionary.
    If so, check if they possess a specific permission.
	Return the boolean result.

	Arguments:
	steam_ID - the steam ID of the user to be checked.
	permission (Keyword Default: None) - the permission name to be checked.

	"""
	if steam_ID not in Client.clients:
		return False
	if permission is None:
		return True
	client = Client.clients[steam_ID]
	if client.group is None:
		return permission in client.permissions
	return permission in client.group.permissions


def is_user_immune(steam_ID, permission):
	"""Check whether a particular steam ID exists in the clients dictionary.
    If so, check if they possess a specific immunity.
	Return the boolean result.

	Arguments:
	steam_ID - the steam ID of the user to be checked.
	permission - the permission name to be checked.

	"""
	if steam_ID not in Client.clients:
		return False
	client = Client.clients[steam_ID]
	if client.group is None:
		return permission in client.immunities
	return permission in client.group.immunities
