# <path to game directory>/addons/eventscripts/_engines/python/Lib/esutils/
# configurations.py
# by Adam Cunnington

"""Provide methods for the creation and execution of .cfg configuration
files.

"""

from __future__ import with_statement
import os

from esutils import tools
import es


__all__ = (
    "ConfigurationsError",
    "Configuration",
)

_COMMENT_PREFIX = "//"


class ConfigurationsError(Exception):
    """General error encountered relating to esutils.configurations"""


class Configuration(object):
    """Add plain text, variables and server commands to be writtten to an
    executable configuration file.

    """

    def __init__(self, file_path):
        """Instantiate a Configuration object.

        Arguments:
        file_path - full, absolute path to the configuration file.

        """
        self._file_path = file_path.replace("\\", "/")
        self._lines = []
        self._append(self._file_path)
        self._append()

    def _append(self, text="", comment=True):
        if text and comment:
            self._lines.append("%s %s" %(_COMMENT_PREFIX, text))
        else:
            self._lines.append(text)

    def append_command(self, name, *parameters):
        """Call the internal _append function with formatted command syntax.

        Arguments:
        name - the name of the command to be added.
        parameters - the arguments to pass with the command.

        """
        self._append("%s %s"
                     %(name, " ".join("\"%s\"" % parameter
                                      for parameter in parameters)), False)

    def append_text(self, text=""):
        """Call the internal _append function with the text as a comment.

        Keyword Arguments:
        text (Keyword Default: "") - the text to be added.

        """
        self._append(text)

    def append_variable(self, item):
        """Call the internal _append function to write the default value as a
        comment and the formatted server variable syntax.

        Arguments:
        item - the server variable object to be added.

        """
        default_value = str(item)
        self._append("Default Value: %s" % default_value)
        self._append("%s \"%s\"" %(item._name, default_value), False)

    def execute(self):
        """Ensure the configuration file exists as it won't if the
        configuration file has been manually deleted or not yet written.
        If it exists, use es.mexec to execute the relative path.

        """
        if not os.path.isfile(self._file_path):
            raise ConfigurationsError("%s does not exist" % self._file_path)
        game_dir = str(tools.GAME_DIR).replace("\\", "/")
        es.server.cmd("es_xmexec ../%s" % self._file_path.replace(game_dir,
                                                                  "", 1))

    def write(self, overwrite=False):
        """Create the parent directories if they do not exist. If the file
        does not exist or should be overwritten, create the file and fill it
        with the list of lines, joined by line break characters.

        Arguments:
        overwrite (Keyword Default: False) - whether or not the file should be
        created irregardless of whether it already exists.

        """
        if os.path.isfile(self._file_path) and not overwrite:
            return
        directory_path = os.path.dirname(self._file_path)
        if not os.path.isdir(directory_path):
            os.makedirs(directory_path)
        with open(self._file_path, "w") as fp:
            fp.write("\n".join(self._lines))